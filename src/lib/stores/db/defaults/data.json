{
	"markdown": {
		"mdcheatsheet": "# Markdown Cheatsheet\n\nThanks for visiting [MdCraft](https://www.markdownguide.org)!\n\nThis Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can’t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for [basic syntax](https://www.markdownguide.org/basic-syntax) and [extended syntax](https://www.markdownguide.org/extended-syntax). Click the toggle above to tinker with the source of this note.\n\n## Basic Syntax\n\nThese are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements, so does MdCraft! :fire:\n\n### Heading\n\n# H1\n## H2\n### H3\n\n### Bold\n\n**bold text**\n\n### Italic\n\n*italicized text*\n\n### Blockquote\n\n> If you hear a voice within you say ‘you cannot paint,’ then by all means paint, and that voice will be silenced.\n\n### Ordered List\n\n1. First item\n2. Second item\n3. Third item\n\n### Unordered List\n\n- First item\n- Second item\n- Third item\n\n### Code\n\n`code`\n\n### Horizontal Rule\n\n---\n\n### Link\n\n[Markdown Guide](https://www.markdownguide.org)\n\n### Image\n\n![alt text](https://ik.imagekit.io/lovelin/mdcraft/tux?updatedAt=1696090323858)\n\n## Extended Syntax\n\nThese elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. But MdCraft support these out-of-the-box :sunglasses:\n\n### Table\n\n| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title |\n| Paragraph   | Text |\n\n### Fenced Code Block\n\n```cpp\n#include <iostream>\nusing namespace std;\nint main(){\n  cout << \"Hello World\" << endl;\n}\n```\n\n### Strikethrough\n\n~~The world is flat.~~\n\n### Task List\n\n- [x] Write the press release\n- [x] Update the website\n- [ ] Contact the media\n\n### Emoji\n\nThat is so funny! :joy:\n\n(See also [Copying and Pasting Emoji](https://www.markdownguide.org/extended-syntax/#copying-and-pasting-emoji) and [List of Emoji Shortcodes](https://gist.github.com/rxaviers/7360908))\n\n### Highlight\n\nI need to highlight these ==very important words==.",
		"readmemd": "# MdCraft: In-Browser Markdown Playground\n\nMdCraft is an open-source web app that serves as an in-browser Markdown editor and previewer. It allows users to create, organize, and edit Markdown notes with a live HTML preview and code highlighting. It's a convenient tool for taking notes during programming tutorials and more.\n\n## Tech Stack\n\nMdcraft is not possible without these awesome open source projects.\n\n- [SvelteKit](https://kit.svelte.dev) - Modern framework for building fast and efficient web apps with simplicity\n- [Typescript](https://www.typescriptlang.org/) - 😅\n- [Marked](https://marked.js.org/) - A markdown parser and compiler. Built for speed.\n- [HighlightJS](https://highlightjs.org/) - Syntax highlighter with language auto-detection and zero dependencies.\n- [Sanitize-Html](https://github.com/apostrophecms/sanitize-html) - Provides a simple HTML sanitizer with a clear API.\n- [Svelte-Codejar](https://github.com/novacbn/svelte-codejar) - Svelte Binding for the embeddable code editor [Codjar](https://medv.io/codejar/)\n- [Emoji-Js](https://github.com/iamcal/js-emoji) - A JS Emoji conversion library\n\n## Features\n\n- **Completely Client Side!**: Your notes - Your browser - Offline - Dot.\n\n- **Folder-Based Organization**: Users can create, rename, and delete folders to organize their notes efficiently.\n\n- **Markdown Notes**: Create individual notes inside folders, with the ability to rename and delete them.\n\n- **Live HTML Preview**: Edit the Markdown content of a note in a syntax-highlighted environment and instantly see a live HTML preview with highlighted code blocks.\n\n- **Markdown Download**: Notes can be downloaded in `.md` format, making it easy to save and share your work.\n\n- **Data Persistence**: All data is stored in IndexedDB, ensuring no data loss even if you refresh the page.\n\n- **PWA Support**: MdCraft is presented as a Progressive Web App (PWA) with full offline capabilities, making it accessible wherever you are.\n\n## Usage\n\nMdCraft was primarily created for:\n\n- Taking quick notes while watching programming tutorials online.\n- Creating and organizing Markdown-based documentation.\n- Collaborative Markdown editing and previewing.\n\nIn addition to these use cases, MdCraft comes pre-loaded with some useful reference notes on:\n\n- TypeScript language fundamentals.\n- SQL database concepts.\n\nFeel free to explore and delete these pre-created notes or create your own!\n\n## Acknowledgments\n\nSpecial thanks to [Navin Kodag](https://github.com/100lvlmaster) for sharing the service-worker script. You can find a post about it on [dev.to](https://dev.to/100lvlmaster/create-a-pwa-with-sveltekit-svelte-a36).\n\n## Roadmap\n\nHere are some features and improvements planned for MdCraft in the so-far future:\n\n- **GitHub Gist Integration**: Streamline the process of sharing your notes by enabling users to publish their notes as GitHub Gists directly from MdCraft.\n\n## Project Setup\n\nClone the repository:\n\n```sh\ngit clone https://github.com/lovelindhoni/mdcraft.git\n```\n\nInstall dependencies:\n\n```sh\npnpm install\n```\n\nRun the development server:\n\n```sh\npnpm run dev\n```\n\nOpen a web browser and navigate to `http://localhost:5173`\\\n\\\nFor production build:\n\n```sh\npnpm run build\n```\n\nFor running in production mode:\n\n```sh\npnpm run preview\n```\n\nOpen a web browser and navigate to `http://localhost:4173`\n\n## MIT License"
	},
	"istebits": {
		"aboutus": "# ISTE - BITS\n---\n## Welcome Batch 2k23\t\nISTE Student's Chapter BIT Sindri is a nationally affiliated techno-management society registered with ISTE New Delhi. With the motto of Technical Development, ISTE Student's Chapter focuses on the personality development and enhancement of Technical Skills of the students to meet the modern competitive era.\n## Who we are\n![ISTE-BITS Group Pic](https://www.istebits.com/asset/img/aboutUs.webp)\n\nWe are the leading National Professional non-profit-making Society for the Technical Education in our country with the motto of Career Development of Teachers and Personality Development of Students and the overall development of our Technical Education System. Being the only national organization of educators in the field of Engineering and Technology, ISTE effectively contributes to various missions of the Union Government. At present, the ISTE has a very large and effective membership base consisting of 124024 Life Members, 5 lakh Student members, 2734 Institutional Members, 1369 Faculty Chapters, 1479 Student Chapters at the institutional level, and 17 Sections at the State level.\n- ISTE Student’s Chapter B.I.T Sindri is a technical society in B.I.T Sindri registered with ISTE New Delhi.\n- With the motto of technical development, ISTE Students’ Chapter focuses on the personality development and enhancement of technical skills of students in B.I.T Sindri.\n- ISTE Students’ Chapter B.I.T Sindri conducts many events, seminars, guest lectures, and workshops throughout the year. We also organize the official tech-fest “TRIVENI” where budding engineers from different colleges participate to prove their might. ISTE B.I.T Sindri won the best Students’ Chapter award of Bihar-Jharkhand in the year 2011-2012.\n## Objectives\n- To assist and contribute in the production and development of top quality professional engineers and technician needed by the industry and other organisations.\n- Providing guidance and training to students to develop better learning skills and personality.\n- To bring students across all branches under one roof to help ignite a passion in them to learn and explore the field of science and engineering.",
		"opportunities": "# Opportunities\n---\n## Public Orientation Development\nISTE Students'Chapter BIT Sindri nurtures its members with proficient public speaking and presentation skills. It provides a platform for introverts to come out of their shells through constant group discussions, debates, and event and project handling. Students learn here different soft skills and inculcate leadership skills and teamwork which make them ready for future endeavors.\n## Management Skill Development\nISTE as its name suggests is a techno-management society that provides its members a massive platform to organize and manage a diverse range of technical and non-technical events at national levels. It helps you learn how to manage complex situations as a team. ISTE targets on minimal workload hence aiding in developing time management skills. Moreover, the events organized by ISTE teach the students practical lessons of life and help them find their own niche in the era of cut-throat competition.\n## Event Designing and Execution\nISTE BITS is an ocean of opportunity where its members get the chance to exhibit, enhance and excel their techno-management skills via participation in its top-notch events and even more by conducting them. The members of ISTE come up with a plethora of ideas that turn into such massively successful events. Technical aspects viz poster designing, video creation, content creation, website development, and others are well included  in these activities under the supervision of seniors. Management of such events takes meticulous efforts that turn into quality soft skills such as time management, public and professional interaction, cutting-edge tinkering, sponsorship management, and many more. \n## Sponsorship and Marketing\nBeing a technical society, ISTE organizes many events which are both exciting as well as informative. But a successful event requires a showcase that is matched by the marketing team. Event marketing’s importance boils down to growing your credibility. Partners and the participants get a chance to interact with sponsors in person, making events a golden networking opportunity. This improves your entrepreneurial skills and gives you a rundown on the Silicon Valley work culture.\n## Technical Skill Development\nISTE Students' Chapter BIT Sindri is a well-recognised techno-management society registered with ISTE New Delhi. The Society executes different events, workshops, and seminars and encourages the students towards science and technology in campus. It is a hub of young minds within the institute with the vision of manifesting technical capabilities by providing them knowledge in graphic designing, web development, content writing, and their areas of interest.",
		"contactus": "## Contact Us\n- Email: [istebitsbh01@gmail.com](mailto:istebitsbh01@gmail.com)\n- Email: [spider@istebits.com](spider@istebits.com)\n### Follow us\n- [FaceBook](https://www.facebook.com/istebits/)\n- [Linkedin](https://www.linkedin.com/company/iste-students-chapter-bit-sindri/)\n- [Instagram](https://www.instagram.com/istebits/?hl=en)\n- [Youtube](https://www.youtube.com/@istebits8956)"
	},
	"typescript": {
		"typescriptbasics": "# TypeScript Basics\n\nTypeScript is a statically typed superset of JavaScript, offering developers enhanced type safety and tooling support while compiling to standard JavaScript.\n\n1. **Syntax**:\n   - TypeScript's syntax closely resembles JavaScript, making it easy to transition from JavaScript to TypeScript.\n   - Type annotations help specify the expected data types for variables.\n```ts\n// TypeScript uses a syntax similar to JavaScript, but with type annotations.\nlet message: string = \"Hello, TypeScript!\";\n```\n\n2. **Type Annotations**:\n   - Type annotations provide a clear way to declare and enforce variable types.\n   - In the example, age is explicitly annotated as a number, and name parameter is annotated as a string.\n```ts\n// Use type annotations to declare variable types explicitly.\nlet age: number = 30;\nfunction greet(name: string): string {\n    return `Hello, ${name}!`;\n}\n```\n\n3. **Interfaces and Types**:\n   - Interfaces and custom types help define structured data shapes.\n   - Person is an `interface` with name and age properties, and Point is a `custom type` for coordinates.\n```ts\n// Define custom data structures with interfaces and types.\ninterface Person {\n    name: string;\n    age: number;\n}\n\ntype Point = { x: number; y: number; };\n```\n\n4.  **Type Inference**:\n    - TypeScript can automatically determine the type of a variable if not explicitly provided.\n    - In this case, count is inferred as a number based on the assigned value.\n```ts\n// TypeScript infers types when not explicitly annotated.\nlet count = 5; // TypeScript infers count as a number.\n```\n\n5. **Enums**:\n   - Enums provide a way to define a set of named constants.\n   - Color `enum` defines named constants, and chosenColor is assigned one of these constants.\n```ts\n// Use enums to define a set of named constants.\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\n\nlet chosenColor: Color = Color.Red;\n```\n",
		"advancedtypescript": "# Advanced TypeScript Concepts\n\nAdvanced TypeScript concepts empower developers to write highly flexible and expressive code, enabling better type safety and code structuring in complex applications.\n\n1. **Generics**:\n   - Generics allow you to write functions and classes that work with different types.\n   - In the example, identity is a generic function that returns its argument of type T.\n```ts\n// Write flexible and reusable code with generics.\nfunction identity<T>(arg: T): T {\n    return arg;\n}\nconsole.log(identity<string>(\"Homelander));\n```\n\n2. **Union and Intersection Types**:\n   - Union types `|` allow you to define types that can be one of several types.\n   - Intersection types `&` allow you to create types by combining multiple types.\n```ts\n// Combine types with unions and intersections.\ntype Cat = { name: string; purrs: boolean };\ntype Dog = { name: string; barks: boolean };\ntype Pet = Cat | Dog;\n```\n\n3. **Advanced Type Manipulation**:\n   - Mapped types enable you to create new types based on the structure of existing types.\n   - The Mutable mapped type removes the readonly modifier from all properties of T.\n```ts\n// Use mapped types to create new types.\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\n```\n\n4. **Type Guards**:\n   - Type guards are functions that refine the type of a value within a specific block.\n   - isNumber is a type guard that checks if x is a number.\n```ts\n// Narrow down types with type guards.\nfunction isNumber(x: any): x is number {\n    return typeof x === \"number\";\n}\n```\n\n5. **Decorators**:\n   - Decorators are a way to add metadata and modify the behavior of classes and class members.\n   - The log decorator logs method calls and then calls the original method.\n```ts\n// Create and use decorators for metadata and behavior modification.\nfunction log(target: any, key: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args: any[]) {\n        console.log(`Calling ${key} with arguments ${args}`);\n        return originalMethod.apply(this, args);\n    };\n}\n```\nUnderstanding and mastering these concepts can greatly improve code quality and maintainability in TypeScript projects.",
		"typescriptinpractice": "# TypeScript in Practice\n\nTypeScript in practice involves integrating TypeScript into module systems, configuring development tooling using tsconfig.json, gradually introducing TypeScript into existing JavaScript projects, writing tests with frameworks like Jest, and following best practices for clean and maintainable code.\n\n1. **Module Systems**:\n   - TypeScript supports module systems such as CommonJS and ES6 modules.\n   - You can export and import functions, classes, and variables between modules.\n```ts\n// Export and import modules with TypeScript.\n// Exporting module:\nexport function add(a: number, b: number): number {\n    return a + b;\n}\n\n// Importing module:\nimport { add } from './math';\n```\n2. **Tooling**:\n   - The `tsconfig.json` file is used to configure TypeScript compiler options.\n   - In this example, it specifies the target ECMAScript version and the output directory.\n```ts\n// Configure TypeScript using tsconfig.json.\n{\n    \"compilerOptions\": {\n        \"target\": \"ES6\",\n        \"module\": \"CommonJS\",\n        \"outDir\": \"dist\"\n    }\n}\n```\n3. **Integration with Javascript**:\n   - TypeScript can be incrementally adopted in existing JavaScript projects.\n   - You can start by adding type annotations to JavaScript code.\n```ts\n// Gradually introduce TypeScript into JavaScript projects.\n// .js file\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\n// .ts file\nfunction greet(name: string): string {\n    return `Hello, ${name}!`;\n}\n```\n4. **Testing**:\n   - Testing TypeScript code is similar to testing JavaScript code.\n   - You can use testing frameworks like Jest to write and run tests.\n```ts\n// Write tests for TypeScript code using testing frameworks like Jest.\n// Example test for a function:\nimport { add } from './math';\n\ntest('addition', () => {\n    expect(add(2, 3)).toBe(5);\n});\n```\n5. **Best Practices**\n   - Use clear and descriptive variable names.\n   - Avoid using the `any` type whenever possible.\n   - Enable strict TypeScript options for safer code.\n\nThese practical approaches enable developers to leverage TypeScript's benefits in real-world projects, enhancing productivity and code quality."
	},
	"sql": {
		"dataquery": "# Data Query and Retrieval\n\nSQL is a domain-specific language for managing and manipulating relational databases.\nIt is primarily used to query and retrieve data from databases. Here are some fundamental concepts and SQL syntax for data retrieval:\n\n1. **SELECT Statement**:\n   - The `SELECT` statement retrieves data from one or more tables.\n```sql\nSELECT column1, column2\nFROM table_name\nWHERE condition;\n```\n2. **FROM Clause**:\n   - The `FROM` clause specifies the table(s) from which to retrieve data.\n\n```sql\nSELECT *\nFROM employees;\n```\n3. **ORDER BY Clause**:\n   - The `ORDER BY` clause sorts the result set based on one or more columns.\n\n```sql\nSELECT customer_name, order_date\nFROM orders\nORDER BY order_date DESC;\n```\n4. **GROUP BY Clause**:\n   - The `GROUP BY` clause groups data for aggregation operations.\n\n```sql\nSELECT category, AVG(price) AS avg_price\nFROM products\nGROUP BY category;\n```\n5. **HAVING Clause:**:\n   - The `HAVING` clause applies conditions to grouped data.\n```sql\nSELECT category, AVG(price) AS avg_price\nFROM products\nGROUP BY category\nHAVING AVG(price) > 100;\n```\n\nRemember, SQL's querying capabilities are crucial for extracting meaningful insights from databases.",
		"datamodifications": "# Data Modification and Management\n\nSQL also includes operations for modifying, inserting, updating, and deleting data within databases. Here are key concepts and SQL statements for data management:\n\n1. **INSERT Statement**:\n   - The `INSERT` statement adds new records into a table.\n```sql\nINSERT INTO employees (first_name, last_name, job_title)\nVALUES ('John', 'Doe', 'Manager');\n```\n2. **UPDATE Statement**:\n   - The `UPDATE` statement modifies existing records in a table.\n\n```sql\nUPDATE products\nSET price = price * 1.1\nWHERE category = 'Electronics';\n```\n3. **DELETE Statement**:\n   - The `DELETE` statement removes records from a table.\n\n```sql\nDELETE FROM customers\nWHERE last_purchase_date < '2022-01-01';\n```\n4. **CREATE TABLE Statement**:\n   - The `CREATE TABLE` statement defines the structure of a new table.\n\n```sql\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n```\n5. **ALTER TABLE Statement**:\n   - The `ALTER TABLE` statement modifies an existing table structure.\n\n```sql\nALTER TABLE customers\nADD COLUMN phone_number VARCHAR(15);\n```\n6. **DROP TABLE Statement**:\n   - The `DROP TABLE` statement deletes an entire table and its data.\n\n```sql\nDROP TABLE obsolete_data;\n```\n7. **Transactions**:\n   - Transactions ensure the integrity of data modifications using `BEGIN`, `COMMIT`, and `ROLLBACK`.\n\n```sql\nBEGIN;\nUPDATE account SET balance = balance - 100 WHERE account_id = 123;\nUPDATE account SET balance = balance + 100 WHERE account_id = 456;\nCOMMIT;\n```\nThese SQL operations are essential for managing and maintaining data within a database.",
		"dataindexing": "# Database Schema and Indexing\n\nEfficient database design and optimization are critical for performance. Here are key concepts and SQL statements related to database schema and indexing:\n\n1. **CREATE DATABASE Statement**:\n   - The `CREATE DATABASE` statement establishes a new database.\n\n```sql\nCREATE DATABASE mydb;\n```\n2. **CREATE INDEX Statement**:\n   - The `CREATE INDEX` statement improves query performance by creating indexes on columns.\n\n```sql\nCREATE INDEX idx_last_name ON employees (last_name);\n```\n3. **Primary Key and Foreign Key**:\n   - `Primary` keys enforce data integrity, and `foreign` keys establish relationships between tables.\n\n```sql\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n```\n4. **Normalization**:\n   - Normalization reduces data redundancy and improves database design.\n\n```sql\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255),\n    address VARCHAR(255)\n);\n\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    PRIMARY KEY (student_id, course_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n```\n5. **Views**:\n   - `VIEWS` create virtual tables based on `SELECT` queries.\n\n```sql\nCREATE VIEW high_selling_products AS\nSELECT product_name, SUM(quantity_sold) AS total_sold\nFROM sales\nGROUP BY product_name\nHAVING SUM(quantity_sold) > 1000;\n```\n6. **Stored Procedures and Functions**:\n   - Stored procedures and functions are reusable code for data manipulation and processing.\n\n```sql\nCREATE PROCEDURE sp_GetEmployeeByID(IN employee_id INT)\nBEGIN\n    SELECT * FROM employees WHERE employee_id = employee_id;\nEND;\n```\n7. **Triggers**:\n   - `TRIGGERS` automatically execute actions in response to specific database events.\n\n```sql\nCREATE TRIGGER before_insert_employee\nBEFORE INSERT ON employees\nFOR EACH ROW\nBEGIN\n    SET NEW.creation_date = NOW();\nEND;\n```\n\nEfficient schema design and indexing are crucial for optimizing database performance."
	}
}
